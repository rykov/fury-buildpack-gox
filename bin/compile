#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$3
buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch
PATH=$buildpack/$plat/bin:$PATH
goMOD="${build}/go.mod"

# -----------------------------------------
# load environment variables
# allow apps to specify cgo flags. The literal text '${build_dir}' is substituted for the build directory
if [ ! -z "${env_dir}" ]
then
    mkdir -p "${env_dir}"
    env_dir=$(cd "${env_dir}/" && pwd)
  for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE GO15VENDOREXPERIMENT GOVERSION GO_OSARCH GO_INSTALL_PACKAGE_SPEC
    do
        if [ -f "${env_dir}/${key}" ]
        then
            export "${key}=$(cat "${env_dir}/${key}" | sed -e "s:\${build_dir}:${build}:")"
        fi
    done
fi

# -----------------------------------------
# Go compiler should've been installed by heroku-buildpack-go

goVersion=${GOVERSION:-go1.12}
export GOROOT="${cache}/${goVersion}/go"
PATH="${GOROOT}/bin:${PATH}"
GOPATH="${build}"

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags heroku)
if [ -n "${GO_LINKER_SYMBOL}" -a -n "${GO_LINKER_VALUE}" ]
then
    case $ver in
    go1.5*|go1.6*|go1.7*|go1.8*)
        xval="${GO_LINKER_SYMBOL}=${GO_LINKER_VALUE}"
        ;;
    *)
        xval="${GO_LINKER_SYMBOL} ${GO_LINKER_VALUE}"
        ;;
    esac
    FLAGS=(${FLAGS[@]} -ldflags "-X ${xval}")
fi

# Default to $SOURCE_VERSION environment variable: https://devcenter.heroku.com/articles/buildpack-api#bin-compile
GO_LINKER_VALUE=${SOURCE_VERSION}

# Cross-compiling architecture
GOXOPTS=(-verbose -osarch "${GO_OSARCH:-$(uname|tr A-Z a-z)/$arch}")
GOXOUTPUT="bin/{{.Dir}}"
if test -n "$GO_OSARCH"; then
  GOXOUTPUT="$GOXOUTPUT-{{.OS}}-{{.Arch}}"
fi

# Find package path to build
pkgs=${GO_INSTALL_PACKAGE_SPEC:-$(awk '{ if ($1 == "//" && $2 == "+heroku" && $3 == "install" ) { print substr($0, index($0,$4)); exit }}' ${goMOD})}
if [ -z "${pkgs}" ]; then
    if [ -d "${build}/cmd" ]; then
        pkgs="./cmd/..."
    else
        pkgs="./..."
    fi
fi

# Remove prior build in favor of gox
source "${build}/.heroku/go/.meta"
priorBin="${build}/bin/$(basename $NAME)"
echo "-----> Running: rm ${priorBin}"
rm $priorBin

# Start build ...
echo "-----> Running: gox ${GOXOPTS[@]} ${FLAGS[@]} ${pkgs}"
gox -output $build/"$GOXOUTPUT" "${GOXOPTS[@]}" "${FLAGS[@]}" ${pkgs} 2>&1
